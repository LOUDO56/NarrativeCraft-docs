import{_ as t,c as s,o,ag as a}from"./chunks/framework.CjL8bjs4.js";const h=JSON.parse('{"title":"Subscene Control","description":"","frontmatter":{},"headers":[],"relativePath":"tags/subscene.md","filePath":"tags/subscene.md"}'),n={name:"tags/subscene.md"};function c(r,e,l,u,i,b){return o(),s("div",null,e[0]||(e[0]=[a('<h1 id="subscene-control" tabindex="-1">Subscene Control <a class="header-anchor" href="#subscene-control" aria-label="Permalink to &quot;Subscene Control&quot;">​</a></h1><p>Start or stop a subscene on the current scene. These actions target subscenes that have been linked to the current scene beforehand.</p><h2 id="start-subscene" tabindex="-1">Start Subscene <a class="header-anchor" href="#start-subscene" aria-label="Permalink to &quot;Start Subscene&quot;">​</a></h2><p><code>subscene start %subscene_name% [loop=true/false] [block]</code></p><ul><li><strong>%subscene_name%</strong>: The name of the subscene to start.</li><li><strong>loop=true/false</strong> <em>optional</em>: Whether the subscene should loop.</li><li><strong>block</strong> <em>optional</em>: If present, the story will wait until the subscene completes.</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Using the <code>block</code> keyword makes this a blocking command. It delays further script execution until the subscene ends.</p></div><h2 id="stop-subscene" tabindex="-1">Stop Subscene <a class="header-anchor" href="#stop-subscene" aria-label="Permalink to &quot;Stop Subscene&quot;">​</a></h2><p><code>subscene stop %subscene_name%</code></p><ul><li>Stops the specified subscene.</li></ul><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><p><code>subscene stop fight_intro</code><br> → Instantly stops the subscene named &quot;fight_intro&quot;.</p>',11)]))}const d=t(n,[["render",c]]);export{h as __pageData,d as default};
